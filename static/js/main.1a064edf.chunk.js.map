{"version":3,"sources":["components/app/App.styles.js","components/common/Common.Styles.js","components/flipCard/FlipCard.Styles.js","store/constants.js","store/thunks.js","store/selectors.js","components/flipCard/FlipCard.js","components/cardList/CardList.Styles.js","components/cardList/CardList.js","components/toast/Toast.Styles.js","components/toast/Toast.js","components/gameOver/GameOver.js","components/app/App.js","serviceWorker.js","components/cardList/Images.js","store/utils.js","store/AppStore.js","index.js"],"names":["AppWrapper","styled","div","Grid","Button","FLipCardWrapper","FLipCardContainer","props","flip","FlipCardBack","FlipCardFront","actionType","gameDimension","setOpenedCards","openedCards","dispatch","a","type","payload","closeImage","imageId","getGameOver","state","gameReducer","gameOver","getGameMatrix","gameMatrix","getGameKey","gameKey","getOpenCards","getCLoseImageWithIndex","closeImageWithIndex","FlipCard","frontSide","backSide","imageIndex","useState","setIsFrontSide","useSelector","useDispatch","flipCardWithTimeout","time","setTimeout","useEffect","onClick","length","isGameOver","push","find","card","pop","defaultProps","ImageCardWrapper","img","GradientAnimation","keyframes","CardBackSide","CardList","cards","map","item","index","key","image","FadeIn","FadeOut","ToastWrapper","Toast","children","GameOver","App","Boolean","window","location","hostname","match","images","src","getShuffledArray","array","shuffledArray","i","j","Math","floor","random","getInitialLayout","row","col","imageArray","imageCounter","INITIAL_STATE","middlewares","thunk","store","createStore","combineReducers","action","UPDATE_OPENED_CARDS","CLOSE_IMAGE_WITH_INDEX","RESET_STATE","GAME_OVER","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a064edf.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  background-color: #31354b;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n","import styled from 'styled-components/macro';\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-gap: 3rem;\n  grid-template-columns: repeat(5, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  @media only screen and (max-width: 600px) {\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-rows: repeat(5, 1fr);\n  }\n`;\n\nexport const Button = styled.div`\n  border-radius: 4px;\n  background-color: #d35400;\n  border: none;\n  padding: 20px;\n  width: 200px;\n  transition: all 0.5s;\n  margin-top: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  font-size: large;\n  font-weight: bold;\n  color: white;\n`;\n\nexport const FlexRow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 600px;\n`;\n","import styled from 'styled-components/macro';\n\nexport const FLipCardWrapper = styled.div`\n  cursor: pointer;\n  position: relative;\n  height: 25vh;\n  width: 25vh;\n  @media only screen and (max-width: 600px) {\n    height: 12vh;\n    width: 12vh;\n  }\n`;\n\nexport const FLipCardContainer = styled.div`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  transform-style: preserve-3d;\n  transition: all 1s ease-in-out;\n  transform: ${(props) => props.flip && 'rotateY(180deg)'};\n`;\n\nexport const FlipCardBack = styled.div`\n  backface-visibility: hidden;\n  border-radius: 6px;\n  height: 100%;\n  position: absolute;\n  overflow: hidden;\n  width: 100%;\n`;\n\nexport const FlipCardFront = styled(FlipCardBack)`\n  background: #eaeaed;\n  color: #0087cc;\n  text-align: center;\n  transform: rotateY(180deg);\n  border-radius: 6px;\n`;\n","export const actionType = {\r\n  UPDATE_OPENED_CARDS: 'UPDATE_OPENED_CARDS',\r\n  CLOSE_IMAGE_WITH_INDEX: 'CLOSE_IMAGE_WITH_INDEX',\r\n  RESET_STATE: 'RESET_STATE',\r\n  GAME_OVER: 'GAME_OVER',\r\n};\r\n\r\nexport const gameDimension = { row: 2, col: 5 };\r\n","import { actionType } from './constants';\n\nexport const setOpenedCards = (openedCards) => {\n  return async (dispatch) => {\n    return dispatch({ type: actionType.UPDATE_OPENED_CARDS, payload: [...openedCards] });\n  };\n};\n\nexport const closeImage = (imageId) => {\n  return async (dispatch) => {\n    return dispatch({ type: actionType.CLOSE_IMAGE_WITH_INDEX, payload: imageId });\n  };\n};\n\nexport const resetGame = () => {\n  return async (dispatch) => {\n    return dispatch({ type: actionType.RESET_STATE, payload: null });\n  };\n};\n\nexport const setGameOver = (isGameOver) => {\n  return async (dispatch) => {\n    return dispatch({ type: actionType.GAME_OVER, payload: isGameOver });\n  };\n};\n","export const getGameOver = (state) => state.gameReducer.gameOver;\n\nexport const getGameMatrix = (state) => state.gameReducer.gameMatrix;\n\nexport const getGameKey = (state) => state.gameReducer.gameKey;\n\nexport const getOpenCards = (state) => state.gameReducer.openedCards;\n\nexport const getCLoseImageWithIndex = (state) => state.gameReducer.closeImageWithIndex;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FlipCardBack, FLipCardContainer, FlipCardFront, FLipCardWrapper } from './FlipCard.Styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeImage, setGameOver, setOpenedCards } from '../../store/thunks';\nimport { gameDimension } from '../../store/constants';\nimport { getCLoseImageWithIndex, getOpenCards } from '../../store/selectors';\n\nconst FlipCard = ({ frontSide, backSide, imageId, imageIndex }) => {\n  const [flip, setIsFrontSide] = useState(false);\n  const openedCards = useSelector(getOpenCards);\n  const closeImageWithIndex = useSelector(getCLoseImageWithIndex);\n  const dispatch = useDispatch();\n\n  const flipCardWithTimeout = (time, flip) => {\n    setTimeout(() => {\n      setIsFrontSide(flip);\n    }, time);\n  };\n\n  useEffect(() => {\n    // Open card after 500ms\n    flipCardWithTimeout(500, true);\n    // Close card after 5sec\n    flipCardWithTimeout(1500, false);\n  }, []);\n\n  useEffect(() => {\n    if (closeImageWithIndex === imageIndex) {\n      flipCardWithTimeout(2000, !flip);\n      dispatch(closeImage(null));\n    }\n  }, [closeImageWithIndex, imageIndex, dispatch, flip]);\n\n  const onClick = () => {\n    setIsFrontSide(!flip);\n\n    if (openedCards.length >= gameDimension.row * gameDimension.col - 1) {\n      dispatch(setGameOver(true));\n      return;\n    }\n    if (openedCards.length % 2 === 0) {\n      openedCards.push({ imageId, imageIndex });\n      dispatch(setOpenedCards(openedCards));\n      return;\n    }\n    // If 2nd card opened & does not match the previous card then close the card\n    if (openedCards.length % 2 === 1 && !openedCards.find((card) => card.imageId === imageId)) {\n      // Close card after 2sec\n      flipCardWithTimeout(2000, false);\n      // Remove previous image\n      dispatch(closeImage(openedCards.pop().imageIndex));\n    } else {\n      openedCards.push({ imageId, imageIndex });\n    }\n    dispatch(setOpenedCards(openedCards));\n  };\n\n  return (\n    <FLipCardWrapper>\n      <FLipCardContainer onClick={onClick} flip={flip}>\n        <FlipCardFront>{frontSide}</FlipCardFront>\n        <FlipCardBack>{backSide}</FlipCardBack>\n      </FLipCardContainer>\n    </FLipCardWrapper>\n  );\n};\n\nexport default FlipCard;\n\nFlipCard.propTypes = {\n  frontSide: PropTypes.element,\n  backSide: PropTypes.element,\n  imageId: PropTypes.number,\n  imageIndex: PropTypes.number,\n};\n\nFlipCard.defaultProps = {\n  frontSide: <div>Front</div>,\n  backSide: <div>Back</div>,\n};\n","import styled, { keyframes } from 'styled-components/macro';\r\n\r\nexport const ImageCardWrapper = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst GradientAnimation = keyframes`\r\n  0% {\r\nbackground-position: 0% 50%;\r\n}\r\n50% {\r\nbackground-position: 100% 50%;\r\n}\r\n100% {\r\nbackground-position: 0% 50%;\r\n}\r\n`;\r\nexport const CardBackSide = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 6px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: linear-gradient(-45deg, #ee2943, #e7da65, #23a6d5, #23d5ab);\r\n  background-size: 400% 400%;\r\n  animation: ${GradientAnimation} 15s ease infinite;\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '../common/Common.Styles';\r\nimport FlipCard from '../flipCard/FlipCard';\r\nimport { CardBackSide } from './CardList.Styles';\r\nimport { useSelector } from 'react-redux';\r\nimport { getGameKey, getGameMatrix } from '../../store/selectors';\r\n\r\nconst CardList = () => {\r\n  const gameMatrix = useSelector(getGameMatrix);\r\n  const gameKey = useSelector(getGameKey);\r\n\r\n  let cards = gameMatrix\r\n    ? gameMatrix.map((item, index) => (\r\n        <FlipCard\r\n          key={`${gameKey}_${index}`}\r\n          imageId={item.imageId}\r\n          imageIndex={item.index}\r\n          backSide={<CardBackSide />}\r\n          frontSide={item.image}\r\n        />\r\n      ))\r\n    : null;\r\n\r\n  return <Grid key={gameKey}>{cards}</Grid>;\r\n};\r\n\r\nexport default CardList;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nconst FadeIn = keyframes`\r\n  from { opacity: 0; }\r\n  to   { opacity: 1; }\r\n`;\r\n\r\nconst FadeOut = keyframes`\r\n  from { opacity: 1; }\r\n  to   { opacity: 0; }\r\n`;\r\n\r\nexport const ToastWrapper = styled.div`\r\n  width: 200px;\r\n  height: auto;\r\n  position: absolute;\r\n  left: 50%;\r\n  margin-left: -100px;\r\n  bottom: 10px;\r\n  background-color: #35bc7a;\r\n  color: #f0f0f0;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  text-align: center;\r\n  border-radius: 7px;\r\n  -webkit-box-shadow: 0px 0px 24px -1px rgba(56, 56, 56, 1);\r\n  -moz-box-shadow: 0px 0px 24px -1px rgba(56, 56, 56, 1);\r\n  box-shadow: 0px 0px 24px -1px rgba(56, 56, 56, 1);\r\n  animation: ${FadeIn} forwards 1000ms;\r\n  animation: ${FadeOut} forwards 30000ms;\r\n`;\r\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ToastWrapper } from './Toast.Styles';\n\nconst Toast = (props) => <ToastWrapper>{props.children}</ToastWrapper>;\n\nexport default Toast;\n\nToast.propTypes = {\n  children: PropTypes.any,\n};\n","import React from 'react';\r\nimport Toast from '../toast/Toast';\r\nimport { Button } from '../common/Common.Styles';\r\nimport { resetGame, setOpenedCards } from '../../store/thunks';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getGameOver } from '../../store/selectors';\r\n\r\nconst GameOver = () => {\r\n  const gameOver = useSelector(getGameOver);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      {gameOver && (\r\n        <>\r\n          <Toast>You won!</Toast>\r\n          <Button\r\n            onClick={() => {\r\n              dispatch(resetGame());\r\n              dispatch(setOpenedCards([]));\r\n            }}\r\n          >\r\n            Restart\r\n          </Button>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameOver;\r\n","import React from 'react';\nimport { AppWrapper } from './App.styles';\nimport CardList from '../cardList/CardList';\nimport GameOver from '../gameOver/GameOver';\n\nconst App = () => {\n  return (\n    <AppWrapper>\n      <CardList />\n      <GameOver />\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { ImageCardWrapper } from './CardList.Styles';\r\n\r\nexport const images = [\r\n  <ImageCardWrapper key=\"sports\" src=\"http://lorempixel.com/200/200/sports/\" />,\r\n  <ImageCardWrapper key=\"abstract\" src=\"http://lorempixel.com/200/200/abstract/\" />,\r\n  <ImageCardWrapper key=\"food\" src=\"http://lorempixel.com/200/200/food/\" />,\r\n  <ImageCardWrapper key=\"cats\" src=\"http://lorempixel.com/200/200/cats/\" />,\r\n  <ImageCardWrapper key=\"fashion\" src=\"http://lorempixel.com/200/200/fashion/\" />,\r\n  <ImageCardWrapper key=\"nature\" src=\"http://lorempixel.com/200/200/nature/\" />,\r\n  <ImageCardWrapper key=\"nightlife\" src=\"http://lorempixel.com/200/200/nightlife/\" />,\r\n  <ImageCardWrapper key=\"people\" src=\"http://lorempixel.com/200/200/people/\" />,\r\n  <ImageCardWrapper key=\"random\" src=\"http://lorempixel.com/200/200/transport/\" />,\r\n  <ImageCardWrapper key=\"city\" src=\"http://lorempixel.com/200/200/city/\" />,\r\n];\r\n","import { images } from '../components/cardList/Images';\nimport { gameDimension } from './constants';\n\n/**\n *\n * @param array\n * @returns {*[]}\n */\nexport const getShuffledArray = (array = []) => {\n  const shuffledArray = [...array];\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\n/**\n *\n * @param row\n * @param col\n * @returns {*[]}\n */\nexport const getInitialLayout = (row = gameDimension.row, col = gameDimension.col) => {\n  const imageArray = [];\n  for (let i = 0, imageCounter = 0; i < row * col; i += 2, imageCounter++) {\n    // push image pair\n    imageArray.push({ imageId: imageCounter, image: images[imageCounter], index: i });\n    imageArray.push({ imageId: imageCounter, image: images[imageCounter], index: i + 1 });\n  }\n  return getShuffledArray(imageArray);\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { actionType } from './constants';\nimport { getInitialLayout } from './utils';\n\nexport const INITIAL_STATE = {\n  gameMatrix: getInitialLayout(),\n  openedCards: [],\n  closeImageWithIndex: null,\n  gameOver: false,\n  gameKey: 1,\n};\n\nexport const gameReducer = (state = INITIAL_STATE, action) => {\n  const { UPDATE_OPENED_CARDS, CLOSE_IMAGE_WITH_INDEX, RESET_STATE, GAME_OVER } = actionType;\n\n  switch (action.type) {\n    default:\n      break;\n    case UPDATE_OPENED_CARDS:\n      state = {\n        ...state,\n        openedCards: action.payload,\n      };\n      break;\n    case CLOSE_IMAGE_WITH_INDEX:\n      state = {\n        ...state,\n        closeImageWithIndex: action.payload,\n      };\n      break;\n    case GAME_OVER:\n      state = {\n        ...state,\n        gameOver: action.payload,\n      };\n      break;\n    case RESET_STATE:\n      state = {\n        ...INITIAL_STATE,\n        gameKey: ++INITIAL_STATE.gameKey,\n        gameMatrix: getInitialLayout(),\n      };\n      break;\n  }\n  return state;\n};\n\nconst middlewares = [\n  // createLogger(),\n  thunk,\n];\n\nexport const store = createStore(\n  combineReducers({ gameReducer }),\n  {},\n  composeWithDevTools(\n    applyMiddleware(...middlewares)\n    // other store enhancers if any\n  )\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/AppStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}